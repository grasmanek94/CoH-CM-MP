import("helper_functions.scar")

local function Modify_Squad_Disable_AutoTarget(squad)
	local modifier = Modifier_Create(MAT_Weapon, "modifiers\\auto_target_enable_weapon_modifier.lua", MUT_Enable, false, -1, "hardpoint_01")
	local modid = Modifier_ApplyToSquad(modifier, squad)
	Modifier_AddToSquadTable(squad, modid)
	return modid
end

local function Modify_Entity_Disable_AutoTarget(entity)
	local modifier = Modifier_Create(MAT_Weapon, "modifiers\\auto_target_enable_weapon_modifier.lua", MUT_Enable, false, -1, "hardpoint_01")
	local modid = Modifier_ApplyToEntity(modifier, entity)
	Modifier_AddToSquadTable(entity, modid)
	return modid
end

local function Update_New_Entity(entity, player_info)
	if (Entity_IsOfType(entity, "hq")) then
		EventRule_AddEntityEvent(CMM_Event_Callback_AbilityExecuted, entity, GE_AbilityExecuted)
	end
end

local function Update_New_Squad(squad, player_info)
	local blueprint = Squad_GetBlueprint(squad)
	if (Is_Blueprint_In_Table(blueprint, {SBP.CW.HQ, SBP.CW.HQ_REINFORCEMENT})) then
		Update_New_Entity(Squad_EntityAt(squad, 0), player_info)
	end
end

function CMM_Update_Player_Squads_and_Entities()
	for idx, player_info in ipairs(cmm_table_players) do
		local player = player_info.player
		local sg_all = Player_GetSquads(player)
		local table_all_squads = SGroup_to_GameID_Table(sg_all)
		SGroup_Destroy(sg_all)
		
		local table_intersection = Table_Intersection(player_info.squads, table_all_squads)
		if (table.getn(table_intersection) ~= table.getn(table_all_squads) or table.getn(table_intersection) ~= table.getn(player_info.squads)) then
			-- check if there are any new squads:
			local table_new_squads = Table_Complement(table_all_squads, table_intersection)
			for gameid, val in pairs(table_new_squads) do
				local squad = Squad_FromWorldID(gameid)
				Update_New_Squad(squad, player_info)
			end
		end
		player_info.squads = table_all_squads
		
		local eg_all = Player_GetEntities(player)
		local table_all_entities = EGroup_to_GameID_Table(eg_all)
		EGroup_Destroy(eg_all)
		
		table_intersection = Table_Intersection(player_info.entities, table_all_entities)
		if (table.getn(table_intersection) ~= table.getn(table_all_entities) or table.getn(table_intersection) ~= table.getn(player_info.entities)) then
			-- check if there are any new squads:
			local table_new_entities = Table_Complement(table_all_entities, table_intersection)
			for gameid, val in pairs(table_new_entities) do
				local entity = Entity_FromWorldID(gameid)
				Update_New_Entity(entity, player_info)
			end
		end
		player_info.entities = table_all_entities
	end
end

local function Player_Is_Local(player)
	return (player == Game_GetLocalPlayer())
end

local function Toggle_FOW()
	if (cmm_fow) then
		FOW_RevealAll()
		cmm_fow = false
		DisplayText("Fog of War: OFF")
	else
		FOW_UnRevealAll()
		cmm_fow = true
		DisplayText("Fog of War: ON")
	end
end

local function Toggle_Taskbar()
	if (Taskbar_IsVisible()) then
		Taskbar_SetVisibility(false)
		DisplayText("Taskbar: OFF")		
	else
		Taskbar_SetVisibility(true)
		DisplayText("Taskbar: ON")
	end
end

local function Select_Race(player_info)
	player_info.selected_race = (player_info.selected_race + 1) % 4
	if (Player_Is_Local(player_info.player)) then
		DisplayText("Selected Army: ".. cmm_table_races[player_info.selected_race])
	end
end

local function Util_SpawnSquad(player, blueprint, pos)
	local squad = Squad_CreateAndSpawnToward(blueprint, player, 0, pos, World_Pos(0, 0, 1))
	return squad
end

local function Util_ParadropSquad(player, blueprint, pos)
	local sg = SGroup_Create("")
	Player_DoParadrop(player, sg, pos, 100, 20, blueprint, 0, 0)
	SGroup_Destroy(sg)
end

local function Spawn_Squad(index, player_info, pos)
	local table_squads = cmm_table_squads[player_info.selected_race]
	if (index <= table.getn(table_squads)) then
		local blueprint = table_squads[index]
		local paradrop = false
		local state_machine
		local state
		if (blueprint.blueprint ~= nil) then
			paradrop = blueprint.paradrop
			state_machine = blueprint.state_machine
			state = blueprint.state
			blueprint = blueprint.blueprint
		end
		if (paradrop) then
			Util_ParadropSquad(player_info.player, blueprint, pos)
			if (Player_Is_Local(player_info.player)) then
				DisplayText("Squad paradropped: ".. BP_GetName(blueprint))
			end
		else
			local squad = Util_SpawnSquad(player_info.player, blueprint, pos)
			if (state_machine ~= nil and state ~= nil) then
				Squad_SetAnimatorState(squad, state_machine, state)
			end
			if (Player_Is_Local(player_info.player)) then	
				DisplayText("Squad spawned: ".. BP_GetName(blueprint))
			end
		end
	end
end

local function Spawn_Entity(index, player_info, pos)
	local table_entities = cmm_table_entities[player_info.selected_race]
	if (index <= table.getn(table_entities)) then
		local blueprint = table_entities[index]
		local entity = Entity_Create(blueprint, player_info.player, pos, pos)
		Entity_Spawn(entity)
		if (Entity_IsBuilding(entity)) then
			Entity_ForceConstruct(entity)
		end
		if (Player_Is_Local(player_info.player)) then	
			DisplayText("Entity spawned: ".. BP_GetName(blueprint))
		end
	end
end

local function Spawn_Ability(index, player_info, pos)
	local table_abilities = cmm_table_abilities[player_info.selected_race]
	if (index <= table.getn(table_abilities)) then
		local blueprint = table_abilities[index]
		Command_PlayerPosAbility(player_info.player, player_info.player, pos, blueprint, true)
		if (Player_Is_Local(player_info.player)) then	
			DisplayText("Ability used: ".. BP_GetName(blueprint))
		end
	end
end

local function Spawn_All_Squads(player_info, pos)
	for idx, blueprint in ipairs(cmm_table_squads[player_info.selected_race]) do
		Spawn_Squad(idx, player_info, pos)
	end
	if (Player_Is_Local(player_info.player)) then
		DisplayText("All ".. cmm_table_races[player_info.selected_race].. " Squads spawned.")
	end
end

local function Toggle_Instant_Production(player_info)
	if (player_info.modifiers.production_rate == nil) then
		player_info.modifiers.production_rate = Modify_PlayerProductionRate(player_info.player, 10000)
		if (Player_Is_Local(player_info.player)) then
			DisplayText("Instant Production: ON")
		end
	else
		Modifier_Remove(player_info.modifiers.production_rate)
		player_info.modifiers.production_rate = nil
		if (Player_Is_Local(player_info.player)) then
			DisplayText("Instant Production: OFF")
		end
	end
end

local function Toggle_Instant_Build(player_info)
	if (player_info.modifiers.build_time == nil) then
		player_info.modifiers.build_time = {}
		for idx, table_blueprints in pairs(cmm_table_entities) do
			for idx2, blueprint in ipairs(table_blueprints) do
				local table_modid = Modify_EntityBuildTime(player_info.player, blueprint, 0.01)
				Table_Merge(player_info.modifiers.build_time, table_modid)
			end
		end
		if (Player_Is_Local(player_info.player)) then
			DisplayText("Instant Build: ON")
		end
	else
		Modifier_Remove(player_info.modifiers.build_time)
		player_info.modifiers.build_time = nil
		if (Player_Is_Local(player_info.player)) then
			DisplayText("Instant Build: OFF")
		end
	end
end

local function Toggle_Instant_AbilityRecharge(player_info)
	if (player_info.modifiers.ability_recharge_time == nil) then
		player_info.modifiers.ability_recharge_time = {}
		for idx, blueprint in ipairs(cmm_table_all_abilities) do
			local factor = 0.0001
			-- fix bug with gliders:
			if (blueprint == ABILITY.COMMANDER_TREE.CW.GLIDER_COMMANDOS or
				blueprint == ABILITY.COMMANDER_TREE.CW.GLIDER_TETRARCH or
				blueprint == ABILITY.COMMANDER_TREE.CW.GLIDER_HQ
			) then
				factor = 0.1
			end
			local table_modid = Modify_AbilityRechargeTime(player_info.player, blueprint, factor)
			Table_Merge(player_info.modifiers.ability_recharge_time, table_modid)
		end
		if (Player_Is_Local(player_info.player)) then
			DisplayText("Instant Ability Recharge: ON")
		end
	else
		Modifier_Remove(player_info.modifiers.ability_recharge_time)
		player_info.modifiers.ability_recharge_time = nil
		if (Player_Is_Local(player_info.player)) then
			DisplayText("Instant Ability Recharge: OFF")
		end
	end
end

local function Toggle_AI()
	if (cmm_ai_enabled) then
		AI_EnableAll(false)
		cmm_ai_enabled = false;
		DisplayText("AI: OFF")
	else
		AI_EnableAll(true)
		cmm_ai_enabled = true;
		DisplayText("AI: ON")
	end
end

local function Toggle_Local_AI(player)
	if (AI_IsEnabled(player)) then
		AI_Enable(player, false)
		if (Player_Is_Local(player)) then
			DisplayText("Local AI: OFF")
		end
	else
		AI_Enable(player, true)
		if (Player_Is_Local(player)) then
			Misc_AIControlLocalPlayer()
			DisplayText("Local AI: ON")
		end
	end
end

local function Load_Atmosphere()
	cmm_atmosphere = (cmm_atmosphere) % table.getn(cmm_table_atmosphere) + 1
	Game_LoadAtmosphere("data:art/scenarios/presets/atmosphere/".. cmm_table_atmosphere[cmm_atmosphere], 1) -- 1 second fade time between different atmospheres
	DisplayText("Atmosphere loaded: ".. cmm_table_atmosphere[cmm_atmosphere])
end

local function Add_Resources(player)
	Player_AddResource(player, RT_Manpower, 99999)
	Player_AddResource(player, RT_Fuel, 99999)
	Player_AddResource(player, RT_Munition, 99999)
	Player_AddResource(player, RT_Action, 2000)
	Player_SetPopCapOverride(player, 9999)
	if (Player_Is_Local(player)) then
		DisplayText("Resources added")
	end
end

local function Revert_Chosen_Commander_Tree(player)
	local commander_points = Player_GetResource(player, RT_Command)
	local action_points = Player_GetResource(player, RT_Action)
	Player_RevertChosenCommanderTree(player)
	Player_ResetResource(player, RT_Action)
	Player_ResetResource(player, RT_Command)
	Player_SetResource(player, RT_Action, action_points)
	Player_SetResource(player, RT_Command, commander_points)
	if (Player_Is_Local(player)) then
		DisplayText("Chosen Commander Tree reverted")
	end
end

local function Display_Help()
	DisplayText(
		  "Shift + F1 = Toggle Fog of War"..
		"\nShift + F2 = Toggle Taskbar"..
		"\nShift + F3 = Spawn all units of selected army"..
		"\nShift + F4 = Toggle Instant Production"..
		"\nShift + F5 = Toggle Instant Build"..
		"\nShift + F6 = Toggle Instant Ability Recharge"..
		"\nShift + F7 = Toggle AI"..
		"\nShift + F8 = Toggle local AI"..
		"\nShift + F9 = Change Atmosphere"..
		"\nShift + F10 = Add Resources"..
		"\nShift + F11 = Revert Chosen Commander Tree"..
		"\nShift + F12 = Toggle Big Head Mode"..
		"\nShift + Control + F1 = This Help"..
		"\nShift + Control + F2 = Squad Hotkey List"..
		"\nShift + Control + F3 = Ability Hotkey List"..
		"\nShift + Control + F4 = Entity Hotkey List"..
		"\nShift + Spacebar = Change Selected Army"..
		"\nShift + Insert = Change Squad Owner"..
		"\nShift + Control + Insert = Change Entity Owner"..
		"\nShift + Delete = Destroy Squad"..
		"\nShift + Control + Delete = Destroy Entity"..
		"\nShift + \\ = Toggle Auto Targeting"..
		"\nShift + . = Toggle AI Lock Squad"..
		"\nShift + Control + . = Toggle AI Lock Entity"..
		"\nShift + ; = Increase Veterancy"..
		"\nShift + [ = Copy Squad"..
		"\nShift + Control + [ = Copy Entity"..
		"\nShift + - = Special Copy"..
		"\nShift + ] = Paste"..
		"\nShift + [0-9][A-Z] = Spawn Units of selected army"..
		"\nShift + Control + [1-9][A-Z] = Spawn Abilities of selected army"..
		"\nShift + Alt + [0-9][A-Z] = Spawn Entities of selected army"
	,30)
end

local function Display_Help_Squads(player_info)
	local hotkeys = {
		"1", "2", "3", "4", "5", "6", "7", "8", "9", "0",
		"q", "w", "e", "r", "t", "y", "u", "i", "o", "p",
		"a", "s", "d", "f", "g", "h", "j", "k", "l", "z",
		"x", "c", "v", "b", "n", "m"
	}
	local text = ""
	for idx, blueprint in ipairs(cmm_table_squads[player_info.selected_race]) do
		if (blueprint.blueprint ~= nil) then
			blueprint = blueprint.blueprint
		end
		text = text .. ((idx > 1) and "\n" or "").. "Shift + ".. hotkeys[idx].. " = ".. BP_GetName2(blueprint)
	end
	DisplayText(text, 30)
end

local function Display_Help_Abilities(player_info)
	local hotkeys = {
		"1", "2", "3", "4", "5", "6", "7", "8", "9", -- disabled "0" because ctrl+shift+0 is already in use
		"q", "w", "e", "r", "t", "y", "u", "i", "o", "p",
		"a", "s", "d", "f", "g", "h", "j", "k", "l", "z",
		"x", "c", "v", "b", "n", "m"
	}
	local text = ""
	for idx, blueprint in ipairs(cmm_table_abilities[player_info.selected_race]) do
		text = text .. ((idx > 1) and "\n" or "").. "Shift + Ctrl + ".. hotkeys[idx].. " = ".. BP_GetName2(blueprint)
	end
	DisplayText(text, 30)
end

local function Display_Help_Entities(player_info)
	local hotkeys = {
		"1", "2", "3", "4", "5", "6", "7", "8", "9", "0",
		"q", "w", "e", "r", "t", "y", "u", "i", "o", "p",
		"a", "s", "d", "f", "g", "h", "j", "k", "l", "z",
		"x", "c", "v", "b", "n", "m"
	}
	local text = ""
	for idx, blueprint in ipairs(cmm_table_entities[player_info.selected_race]) do
		text = text .. ((idx > 1) and "\n" or "").. "Shift + Alt + ".. hotkeys[idx].. " = ".. BP_GetName2(blueprint)
	end
	DisplayText(text, 30)
end

local function Change_Owner(target, display_text)
	if (scartype(target) == ST_SQUAD) then
		local new_player_index = 1
		if (not World_OwnsSquad(target)) then
			new_player_index = World_GetPlayerIndex(Squad_GetPlayerOwner(target)) % World_GetPlayerCount() + 1
		end
		local new_player = World_GetPlayerAt(new_player_index)
		Squad_SetPlayerOwner(target, new_player)
		if (display_text) then
			DisplayText("Squad owner changed to player ".. new_player_index)
		end
	elseif (scartype(target) == ST_ENTITY) then
		if (not Entity_IsStrategicPoint(target)) then
			local new_player_index = 1
			if (not World_OwnsEntity(target)) then
				new_player_index = World_GetPlayerIndex(Entity_GetPlayerOwner(target)) % World_GetPlayerCount() + 1
			end
			local new_player = World_GetPlayerAt(new_player_index)
			Entity_SetPlayerOwner(target, new_player)
			if (display_text) then
				DisplayText("Entity owner changed to player ".. new_player_index)
			end
		else
			if (display_text) then
				DisplayText("Cannot change owner of strategic point.")
			end
		end
	end
end

local function Destroy_Squad(squad, display_text)
	if (display_text) then
		DisplayText("Squad killed: ".. BP_GetName(Squad_GetBlueprint(squad)))
	end
	Squad_Kill(squad)
end

local function Destroy_Entity(entity, display_text)
	if (display_text) then
		DisplayText("Entity killed: ".. BP_GetName(Entity_GetBlueprint(entity)))
	end
	Entity_Kill(entity)
end

local function Toggle_AutoTarget_Squad(squad, display_text)
	local gameid = Squad_GetGameID(squad)
	if (cmm_table_modifiers_squad_autotarget[gameid] ~= nil) then
		Modifier_Remove(cmm_table_modifiers_squad_autotarget[gameid])
		cmm_table_modifiers_squad_autotarget[gameid] = nil
		if (display_text) then
			DisplayText("Auto Targeting: ON (squad: ".. BP_GetName(Squad_GetBlueprint(squad)).. ")")
		end
	else
		cmm_table_modifiers_squad_autotarget[gameid] = Modify_Squad_Disable_AutoTarget(squad)
		if (display_text) then
			DisplayText("Auto Targeting: OFF (squad: ".. BP_GetName(Squad_GetBlueprint(squad)).. ")")
		end
	end
end

local function Toggle_AutoTarget_Entity(entity, display_text)
	local gameid = Entity_GetGameID(entity)
	if (cmm_table_modifiers_entity_autotarget[gameid] ~= nil) then
		Modifier_Remove(cmm_table_modifiers_entity_autotarget[gameid])
		cmm_table_modifiers_entity_autotarget[gameid] = nil
		if (display_text) then
			DisplayText("Auto Targeting: ON (entity: ".. BP_GetName(Entity_GetBlueprint(entity)).. ")")
		end
	else
		cmm_table_modifiers_entity_autotarget[gameid] = Modify_Entity_Disable_AutoTarget(entity)
		if (display_text) then
			DisplayText("Auto Targeting: OFF (entity: ".. BP_GetName(Entity_GetBlueprint(entity)).. ")")
		end
	end
end

local function Toggle_LockAI_Squad(squad, display_text)
	if (World_OwnsSquad(squad)) then return end
	local player = Squad_GetPlayerOwner(squad)
	if (not AI_IsAIPlayer(player) or not AI_IsEnabled(player)) then return end
	local gameid = Squad_GetGameID(squad)
	if (cmm_locked_ai_squads[gameid] ~= nil) then
		AI_UnlockSquad(player, squad)
		cmm_locked_ai_squads[gameid] = nil
		if (display_text) then
			DisplayText("AI Lock: OFF (squad: ".. BP_GetName(Squad_GetBlueprint(squad)).. ")")
		end
	else
		AI_LockSquad(player, squad)
		local sg_temp = SGroup_Create("")
		SGroup_Add(sg_temp, squad)
		Command_Squad(player, sg_temp, SCMD_Stop, false)
		SGroup_Destroy(sg_temp)
		cmm_locked_ai_squads[gameid] = true
		if (display_text) then
			DisplayText("AI Lock: ON (squad: ".. BP_GetName(Squad_GetBlueprint(squad)).. ")")
		end
	end
end

local function Toggle_LockAI_Entity(entity, display_text)
	if (World_OwnsEntity(entity)) then return end
	local player = Entity_GetPlayerOwner(entity)
	if (not AI_IsAIPlayer(player) or not AI_IsEnabled(player)) then return end
	local gameid = Entity_GetGameID(entity)
	if (cmm_locked_ai_entities[gameid] ~= nil) then
		AI_UnlockEntity(player, entity)
		cmm_locked_ai_entities[gameid] = nil
		if (display_text) then
			DisplayText("AI Lock: OFF (entity: ".. BP_GetName(Entity_GetBlueprint(entity)).. ")")
		end
	else
		AI_LockEntity(player, entity)
		cmm_locked_ai_entities[gameid] = true
		if (display_text) then
			DisplayText("AI Lock: ON (entity: ".. BP_GetName(Entity_GetBlueprint(entity)).. ")")
		end
	end
end

local function Increase_Veterancy(squad, display_text)
	Squad_IncreaseVeterancyRank(squad, 1, false)
	if (display_text) then
		DisplayText("Veterancy Increased (squad: ".. BP_GetName(Squad_GetBlueprint(squad)).. ")")
	end
end

local function Copy_Squad(squad, player_info)
	local gameid = Squad_GetGameID(squad)
	player_info.cmm_copy.entity = nil
	player_info.cmm_copy.squad = {
		blueprint = Squad_GetBlueprint(squad),
		heading = Squad_GetHeading(squad),
	}
	if (Player_Is_Local(player_info.player)) then
		DisplayText("Squad copied: ".. BP_GetName(Squad_GetBlueprint(squad)))
	end
end

local function Copy_Entity(entity, player_info)
	local gameid = Entity_GetGameID(entity)
	player_info.cmm_copy.squad = nil
	player_info.cmm_copy.entity = {
		blueprint = Entity_GetBlueprint(entity),
		heading = Entity_GetHeading(entity),
		is_world = World_OwnsEntity(entity),
	}
	if (Player_Is_Local(player_info.player)) then
		DisplayText("Entity copied: ".. BP_GetName(Entity_GetBlueprint(entity)))
	end
end

local function Copy_Special_Entity(pos, player_info)
	player_info.cmm_copy.squad = nil
	local eg_temp = EGroup_Create("")
	World_GetNeutralEntitiesNearPoint(eg_temp, pos, 4)
	if (EGroup_CountSpawned(eg_temp) > 0) then
		local shortest_distance = 9999
		local closest_entity = nil
		for i = 1, EGroup_CountSpawned(eg_temp) do
			local entity = EGroup_GetSpawnedEntityAt(eg_temp, i)
			if (not Entity_IsOfType(entity, "ambient_building")) then
				local distance = World_DistancePointToPoint(pos, Entity_GetPosition(entity))
				if (distance < shortest_distance) then
					closest_entity = entity
					shortest_distance = distance
				end
			end
		end
		if (closest_entity ~= nil) then
			local entity_info = {
				blueprint = Entity_GetBlueprint(closest_entity),
				heading = Entity_GetHeading(closest_entity),
				is_world = World_OwnsEntity(closest_entity),
			}
			player_info.cmm_copy.entity = entity_info
			if (Player_Is_Local(player_info.player)) then
				DisplayText("Entity copied: ".. BP_GetName(entity_info.blueprint))
			end
		end
	end
	EGroup_Destroy(eg_temp)
end

local function Paste(pos, player_info)
	if (player_info.cmm_copy.squad ~= nil) then
		local squad_info = player_info.cmm_copy.squad
		Squad_CreateAndSpawnToward(squad_info.blueprint, player_info.player, 0, pos, Util_GetFacing(pos, squad_info.heading))
		if (Player_Is_Local(player_info.player)) then
			DisplayText("Squad pasted: ".. BP_GetName(squad_info.blueprint))
		end
	elseif (player_info.cmm_copy.entity ~= nil) then
		local entity_info = player_info.cmm_copy.entity
		local entity
		if (entity_info.is_world) then
			entity = Entity_CreateENV(entity_info.blueprint, pos, Util_GetFacing(pos, entity_info.heading))
		else
			entity = Entity_Create(entity_info.blueprint, player_info.player, pos, Util_GetFacing(pos, entity_info.heading))
			Entity_Spawn(entity)
		end
		if (Entity_IsBuilding(entity)) then
			Entity_ForceConstruct(entity)
		end
		if (Player_Is_Local(player_info.player)) then
			DisplayText("Entity pasted: ".. BP_GetName(entity_info.blueprint))
		end
	end
end

function CMM_Event_Callback_AbilityExecuted(entity, blueprint, target)
	local player = Entity_GetPlayerOwner(entity)
	local player_info = cmm_table_players[World_GetPlayerIndex(player)]
	if (blueprint == BP_GetAbilityBlueprint("abilities/cm_fow")) then
		Toggle_FOW()
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_taskbar")) then
		if (Player_Is_Local(player)) then
			Toggle_Taskbar(player)
		end
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_spawn_all_squads")) then
		Spawn_All_Squads(player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_instant_production")) then
		Toggle_Instant_Production(player_info)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_instant_build")) then
		Toggle_Instant_Build(player_info)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_instant_ability")) then
		Toggle_Instant_AbilityRecharge(player_info)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_toggle_ai")) then
		Toggle_AI()
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_toggle_local_ai")) then
		Toggle_Local_AI(player)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_load_atmosphere")) then
		if (Player_Is_Local(player)) then
			Load_Atmosphere()
		end
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_add_resources")) then
		Add_Resources(player)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_revert_chosen_commander_tree")) then
		Revert_Chosen_Commander_Tree(player)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_bighead_mode")) then
		if (Player_Is_Local(player)) then
			ee_bigheadmode()
			DisplayText("Big Head mode toggled")
		end
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_help")) then
		if (Player_Is_Local(player)) then
			Display_Help()
		end
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_help_squads")) then
		if (Player_Is_Local(player)) then
			Display_Help_Squads(player_info)
		end
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_help_abilities")) then
		print("test")
		if (Player_Is_Local(player)) then
			Display_Help_Abilities(player_info)
		end
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_help_entities")) then
		if (Player_Is_Local(player)) then
			Display_Help_Entities(player_info)
		end
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_select_race")) then
		Select_Race(player_info)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_change_owner_squad")) then
		Change_Owner(target, Player_Is_Local(player))
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_change_owner_building")) then
		Change_Owner(target, Player_Is_Local(player))
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_destroy_squad")) then
		Destroy_Squad(target, Player_Is_Local(player))
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_destroy_entity")) then
		Destroy_Entity(target, Player_Is_Local(player))
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_toggle_autotarget_squad")) then
		Toggle_AutoTarget_Squad(target, Player_Is_Local(player))
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_toggle_autotarget_entity")) then
		Toggle_AutoTarget_Building(target, Player_Is_Local(player))
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_toggle_lockai_squad")) then
		Toggle_LockAI_Squad(target, Player_Is_Local(player))
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_toggle_lockai_entity")) then
		Toggle_LockAI_Entity(target, Player_Is_Local(player))
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_increase_veterancy")) then
		Increase_Veterancy(target, Player_Is_Local(player))
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_copy_squad")) then
		Copy_Squad(target, player_info)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_copy_entity")) then
		Copy_Entity(target, player_info)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_copy_special")) then
		Copy_Special_Entity(target, player_info)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_paste")) then
		Paste(target, player_info)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_1")) then
		Spawn_Squad(1, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_2")) then
		Spawn_Squad(2, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_3")) then
		Spawn_Squad(3, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_4")) then
		Spawn_Squad(4, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_5")) then
		Spawn_Squad(5, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_6")) then
		Spawn_Squad(6, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_7")) then
		Spawn_Squad(7, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_8")) then
		Spawn_Squad(8, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_9")) then
		Spawn_Squad(9, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_0")) then
		Spawn_Squad(10, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_q")) then
		Spawn_Squad(11, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_w")) then
		Spawn_Squad(12, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_e")) then
		Spawn_Squad(13, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_r")) then
		Spawn_Squad(14, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_t")) then
		Spawn_Squad(15, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_y")) then
		Spawn_Squad(16, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_u")) then
		Spawn_Squad(17, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_i")) then
		Spawn_Squad(18, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_o")) then
		Spawn_Squad(19, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_p")) then
		Spawn_Squad(20, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_a")) then
		Spawn_Squad(21, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_s")) then
		Spawn_Squad(22, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_d")) then
		Spawn_Squad(23, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_f")) then
		Spawn_Squad(24, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_g")) then
		Spawn_Squad(25, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_h")) then
		Spawn_Squad(26, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_j")) then
		Spawn_Squad(27, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_k")) then
		Spawn_Squad(28, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_l")) then
		Spawn_Squad(29, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_z")) then
		Spawn_Squad(30, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_x")) then
		Spawn_Squad(31, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_c")) then
		Spawn_Squad(32, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_v")) then
		Spawn_Squad(33, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_b")) then
		Spawn_Squad(34, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_n")) then
		Spawn_Squad(35, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_m")) then
		Spawn_Squad(36, player_info, target)
		
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_1")) then
		Spawn_Entity(1, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_2")) then
		Spawn_Entity(2, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_3")) then
		Spawn_Entity(3, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_4")) then
		Spawn_Entity(4, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_5")) then
		Spawn_Entity(5, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_6")) then
		Spawn_Entity(6, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_7")) then
		Spawn_Entity(7, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_8")) then
		Spawn_Entity(8, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_9")) then
		Spawn_Entity(9, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_0")) then
		Spawn_Entity(10, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_q")) then
		Spawn_Entity(11, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_w")) then
		Spawn_Entity(12, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_e")) then
		Spawn_Entity(13, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_r")) then
		Spawn_Entity(14, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_t")) then
		Spawn_Entity(15, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_y")) then
		Spawn_Entity(16, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_u")) then
		Spawn_Entity(17, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_i")) then
		Spawn_Entity(18, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_o")) then
		Spawn_Entity(19, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_p")) then
		Spawn_Entity(20, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_a")) then
		Spawn_Entity(21, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_s")) then
		Spawn_Entity(22, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_d")) then
		Spawn_Entity(23, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_f")) then
		Spawn_Entity(24, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_g")) then
		Spawn_Entity(25, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_h")) then
		Spawn_Entity(26, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_j")) then
		Spawn_Entity(27, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_k")) then
		Spawn_Entity(28, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_l")) then
		Spawn_Entity(29, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_z")) then
		Spawn_Entity(30, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_x")) then
		Spawn_Entity(31, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_c")) then
		Spawn_Entity(32, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_v")) then
		Spawn_Entity(33, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_b")) then
		Spawn_Entity(34, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_n")) then
		Spawn_Entity(35, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_alt_m")) then
		Spawn_Entity(36, player_info, target)
		
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_1")) then
		Spawn_Ability(1, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_2")) then
		Spawn_Ability(2, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_3")) then
		Spawn_Ability(3, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_4")) then
		Spawn_Ability(4, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_5")) then
		Spawn_Ability(5, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_6")) then
		Spawn_Ability(6, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_7")) then
		Spawn_Ability(7, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_8")) then
		Spawn_Ability(8, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_9")) then
		Spawn_Ability(9, player_info, target)
	--elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_0")) then
	--	Spawn_Ability(10, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_q")) then
		Spawn_Ability(10, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_w")) then
		Spawn_Ability(11, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_e")) then
		Spawn_Ability(12, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_r")) then
		Spawn_Ability(13, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_t")) then
		Spawn_Ability(14, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_y")) then
		Spawn_Ability(15, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_u")) then
		Spawn_Ability(16, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_i")) then
		Spawn_Ability(17, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_o")) then
		Spawn_Ability(18, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_p")) then
		Spawn_Ability(19, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_a")) then
		Spawn_Ability(20, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_s")) then
		Spawn_Ability(21, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_d")) then
		Spawn_Ability(22, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_f")) then
		Spawn_Ability(23, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_g")) then
		Spawn_Ability(24, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_h")) then
		Spawn_Ability(25, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_j")) then
		Spawn_Ability(26, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_k")) then
		Spawn_Ability(27, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_l")) then
		Spawn_Ability(28, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_z")) then
		Spawn_Ability(29, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_x")) then
		Spawn_Ability(30, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_c")) then
		Spawn_Ability(31, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_v")) then
		Spawn_Ability(32, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_b")) then
		Spawn_Ability(33, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_n")) then
		Spawn_Ability(34, player_info, target)
	elseif (blueprint == BP_GetAbilityBlueprint("abilities/cm_shift_ctrl_m")) then
		Spawn_Ability(35, player_info, target)
	end
	
end

local function Init_Players()
	for i = 1, World_GetPlayerCount() do
		local player = World_GetPlayerAt(i)
		local team = Player_GetTeam(player)
		local player_info = {
			player = player,
			team = team,
			race = Player_GetRace(player),
			squads = {},
			entities = {},
			modifiers = {
				build_time = nil,
				production_rate = nil,
				ability_recharge_time = nil
			},
			selected_race = World_GetRaceIndex(Player_GetRaceName(player)),
			cmm_copy = {
				entity = nil,
				squad = nil,
			}
		}
		table.insert(cmm_table_players, player_info)
		table.insert(cmm_table_teams[team].players, player_info)
	end
end

local function Init_Globals()
	
	cmm_table_players = {}
	cmm_table_teams = {
		[0] = {
			players = {},
		},
		[1] = {
			players = {},
		}
	}
	cmm_fow = true
	cmm_ai_enabled = true
	cmm_atmosphere = 0
	cmm_table_modifiers_squad_autotarget = {}
	cmm_table_modifiers_entity_autotarget = {}
	cmm_locked_ai_squads = {}
	cmm_locked_ai_entities = {}
	
	cmm_table_races = {[0] = "British", [1] = "American", [2] = "Wehrmacht", [3] = "Panzer Elite"}
	
	cmm_table_squads = {
		[World_GetRaceIndex(TRACE_ALLIES_COMMONWEALTH)] = {
			SBP.CW.COMMANDOS_MG, SBP.CW.CAPTAIN, SBP.CW.LIEUTENANT, SBP.CW.COMMANDOS, SBP.CW.SAPPER,
			SBP.CW.TOMMIES, SBP.CW.MORTAR, SBP.CW.VICKERSMG, SBP.CW.COMMANDOS_MORTAR, SBP.CW.COMMANDOS_PIAT,
			SBP.CW.COMMANDOS_SNIPER, SBP.CW.BREN_CARRIER, SBP.CW.CHURCHILL_AVRE, SBP.CW.CHURCHILL_CROC, SBP.CW.CHURCHILL,
			SBP.CW.COMMAND_CROMWELL, SBP.CW.STUART, SBP.CW.PRIEST, SBP.CW.FIREFLY, SBP.CW.TETRARCH,
			SBP.CW.COMMANDOS_JEEP, SBP.CW.TOWED_AT, SBP.CW.ARTILLERY_25_POUNDER, SBP.CW.BOFORS_AA,
			SBP.CW.HQ, SBP.CW.HQ_REINFORCEMENT, SBP.CW.ARMOUR_HQ, SBP.CW.INFANTRY_HQ, SBP.CW.CROMWELL,
			{blueprint = BP_GetSquadBlueprint("sbps/races/allies_commonwealth/soldiers/commando_paratrooper_squad_sp.lua"), paradrop = false, state_machine = "rolevariation", state = "airborne00"},
			BP_GetSquadBlueprint("sbps/races/allies_commonwealth/soldiers/infantry_piper_squad.lua"),
			BP_GetSquadBlueprint("sbps/races/allies_commonwealth/soldiers/tommy_squad_canadian.lua"),
		},
		[World_GetRaceIndex(TRACE_ALLIES)] = {
			SBP.ALLIES.ENGINEER, SBP.ALLIES.RIFLEMEN, SBP.ALLIES.JEEP, SBP.ALLIES.HEAVYMG, SBP.ALLIES.MORTAR, 
			SBP.ALLIES.SNIPER, SBP.ALLIES.HALFTRACK, SBP.ALLIES.GREYHOUND, SBP.ALLIES.AT_57MM, SBP.ALLIES.M10,
			SBP.ALLIES.CROCODILE, SBP.ALLIES.SHERMAN, SBP.ALLIES.RANGER, SBP.ALLIES.HOWITZER, 
			{blueprint = SBP.ALLIES.PARATROOPER, paradrop = true},
			SBP.ALLIES.PERSHING, SBP.ALLIES.CALLIOPE, SBP.ALLIES.TRUCK, SBP.ALLIES.OFFICER, SBP.ALLIES.MEDIC_SP
		},
		[World_GetRaceIndex(TRACE_AXIS)] = {
			SBP.AXIS.PIONEER, SBP.AXIS.MOTORCYCLE, SBP.AXIS.VOLKSGRENADIER, SBP.AXIS.HEAVYMG, SBP.AXIS.SNIPER,
			SBP.AXIS.HALFTRACK, SBP.AXIS.HALFTRACK_FLAME, SBP.AXIS.HALFTRACK_STUKA, SBP.AXIS.GRENADIER, SBP.AXIS.MORTAR,
			SBP.AXIS.PAK_38, SBP.AXIS.PUMA, SBP.AXIS.OFFICER, SBP.AXIS.NEBELWERFER, SBP.AXIS.STUG,
			SBP.AXIS.KNIGHTSCROSS, SBP.AXIS.OSTWIND, SBP.AXIS.PANZER, SBP.AXIS.PANTHER, SBP.AXIS.GOLIATH,
			SBP.AXIS.FLAK_88, SBP.AXIS.STORMTROOPER, SBP.AXIS.TIGER, SBP.AXIS.KING_TIGER, SBP.AXIS.OPELBLITZ,
			SBP.AXIS.AA_20MM,
			BP_GetSquadBlueprint("sbps/races/axis/vehicles/eselschreck_squad.lua"),
			BP_GetSquadBlueprint("sbps/races/axis/vehicles/tiger_squad_spg_ace.lua"),
		},
		[World_GetRaceIndex(TRACE_AXIS_PANZER_ELITE)] = {
			SBP.ELITE.HENSCHEL_TAKEOFF, SBP.ELITE.PANZERGRENADIER, SBP.ELITE.HEAVYMG, SBP.ELITE.MORTAR, SBP.ELITE.LUFTWAFFE,
			SBP.ELITE.FALLSCHIRMJAGER, SBP.ELITE.ASSAULTGRENADIER, SBP.ELITE.TANKBUSTERS, SBP.ELITE.KETTENRAD, SBP.ELITE.ARMOURCAR_221,
			SBP.ELITE.ARMOURCAR_222, SBP.ELITE.ARMOURCAR_223, SBP.ELITE.HALFTRACK_250, SBP.ELITE.HALFTRACK_MORTAR, SBP.ELITE.HALFTRACK_SNIPER,
			SBP.ELITE.HALFTRACK_VAMPIRE, SBP.ELITE.HALFTRACK_251, SBP.ELITE.PANZER_SUPPORT, SBP.ELITE.HUMMEL, SBP.ELITE.HETZER,
			SBP.ELITE.JAGDPANTHER, SBP.ELITE.MARDER, SBP.ELITE.WIRBLEWIND, SBP.ELITE.BERGETIGER, SBP.ELITE.PANTHER,
			SBP.ELITE.GOLIATH, SBP.ELITE.FLAK_38, SBP.ELITE.KING_TIGER_ARNHEM
		}
	}
	
	cmm_table_entities = {
		[World_GetRaceIndex(TRACE_ALLIES_COMMONWEALTH)] = {
			-- EBP.CW.HQ, EBP.CW.HQ_REINFORCEMENT, EBP.CW.ARMOUR_HQ, EBP.CW.INFANTRY_HQ --> crashes game!
			EBP.CW.GLIDER_COMMANDOS,
			EBP.CW.GLIDER_HQ, EBP.CW.GLIDER_TETRARCH, EBP.CW.MG_NEST, EBP.CW.HOWITZER_NEST, EBP.CW.ANTITANK_NEST,
			EBP.CW.SLITTRENCH_NEST, EBP.CW.MORTAR_NEST, EBP.CW.BOFORS_NEST, EBP.CW.RADIO_BEACON, EBP.CW.BARBED_WIRE,
			EBP.CW.SANDBAG, EBP.CW.CASUALTY_CLEARING, EBP.CW.MINES, EBP.CW.DEMOLITION_CHARGE,
			BP_GetEntityBlueprint("ebps/gameplay/props/commonwealth_bren_item.lua"),
			BP_GetEntityBlueprint("ebps/gameplay/props/commonwealth_piat_item.lua"),
			BP_GetEntityBlueprint("ebps/gameplay/props/cw_3inch_mortar.lua"),
			-- can't pickup: BP_GetEntityBlueprint("ebps/gameplay/props/cw_bren_light_mg.lua"),
			BP_GetEntityBlueprint("ebps/gameplay/props/cw_vickers_303_mg.lua"),
		},
		[World_GetRaceIndex(TRACE_ALLIES)] = {
			EBP.ALLIES.HQ, EBP.ALLIES.BARRACKS, EBP.ALLIES.ARMORY, EBP.ALLIES.MOTORPOOL, EBP.ALLIES.TANK_DEPOT,
			EBP.ALLIES.QUARTER_MASTER, EBP.ALLIES.MEDIC_STATION, EBP.ALLIES.TRIAGE, EBP.ALLIES.MG_NEST, EBP.ALLIES.OBSERVATION_POST,
			EBP.ALLIES.BARBED_WIRE, EBP.ALLIES.SANDBAG, EBP.ALLIES.TANK_TRAP, EBP.ALLIES.MINES, EBP.ALLIES.HOWITZER,
			EBP.PICKUP.MANPOWER, EBP.PICKUP.MUNITIONS, EBP.PICKUP.FUEL, EBP.PICKUP.AIRDROP_FUEL, EBP.PICKUP.AIRDROP_MUNITIONS,
			EBP.PICKUP.ALLIES.BAZOOKA, EBP.PICKUP.ALLIES.BAR, EBP.PICKUP.ALLIES.HMG, EBP.PICKUP.ALLIES.MORTAR,
			BP_GetEntityBlueprint("ebps/races/allies/vehicles/m1_57mm_towed_at_gun.lua"),
			BP_GetEntityBlueprint("ebps/races/allies/vehicles/m2a1_105mm_howitzer.lua"),
			BP_GetEntityBlueprint("ebps/races/allies/vehicles/p47_thunderbolt.lua"),
			BP_GetEntityBlueprint("ebps/environment/art_ambient/objects/vehicles/military/typhoon_aircraft_recon.lua"),
			BP_GetEntityBlueprint("ebps/gameplay/props/allied_m18_recoilless_rifle_item.lua"),
			BP_GetEntityBlueprint("ebps/gameplay/props/allied_m1_thompson_item.lua"),
		},
		[World_GetRaceIndex(TRACE_AXIS)] = {
			EBP.AXIS.HQ, EBP.AXIS.QUARTERS, EBP.AXIS.BARRACKS, EBP.AXIS.ARMORY, EBP.AXIS.COMMAND,
			EBP.AXIS.KAMPFKRAFT, EBP.AXIS.BUNKER, EBP.AXIS.BARBED_WIRE, EBP.AXIS.OBSERVATION_POST, EBP.AXIS.MINES,
			EBP.AXIS.SANDBAG, EBP.AXIS.TANK_TRAP, EBP.PICKUP.AXIS.HMG, EBP.PICKUP.AXIS.MORTAR, EBP.PICKUP.AXIS.LMG_42,
			EBP.PICKUP.AXIS.LMG_44, EBP.PICKUP.AXIS.PANZERSCHRECK,
			BP_GetEntityBlueprint("ebps/races/axis/vehicles/88mm_flak_36_at.lua"),
			BP_GetEntityBlueprint("ebps/races/axis/vehicles/50mm_pak38.lua"),
		},
		[World_GetRaceIndex(TRACE_AXIS_PANZER_ELITE)] = {
			EBP.ELITE.HQ, EBP.ELITE.PANZERJAGER, EBP.ELITE.LOGISTIK, EBP.ELITE.KAMPFGRUPPE, EBP.ELITE.PANZER_ARTILLERIE,
			EBP.ELITE.BARBED_WIRE, EBP.ELITE.MINE_TELLER, EBP.ELITE.MINE_AIR_DROPPED, EBP.ELITE.SANDBAG, EBP.ELITE.TANK_TRAP,
			EBP.SYNC_WEAPON.FLAK_38, EBP.SYNC_WEAPON.FLAK_88_PE,
			BP_GetEntityBlueprint("ebps/races/axis_panzer_elite/buildings/barbed_wire_scorched_earth"),
		}
	}
	
	cmm_table_abilities = {
		[World_GetRaceIndex(TRACE_ALLIES_COMMONWEALTH)] = {
			ABILITY.COMMANDER_TREE.CW.FORWARD_OBSERVATION, ABILITY.COMMANDER_TREE.CW.PDR_25_SUPERCHARGE, ABILITY.COMMANDER_TREE.CW.DECOY_ARTILLERY, ABILITY.COMMANDER_TREE.CW.REAL_ARTILLERY
		},
		[World_GetRaceIndex(TRACE_ALLIES)] = {
			ABILITY.COMMANDER_TREE.ALLIES.HOWITZER_SHOOT, ABILITY.COMMANDER_TREE.ALLIES.RECRUIT_COMBAT_GROUP, ABILITY.COMMANDER_TREE.ALLIES.RECRUIT_PARADROP, ABILITY.COMMANDER_TREE.ALLIES.RECRUIT_PARADROP_AT, ABILITY.COMMANDER_TREE.ALLIES.SUPPLY_DROP,
			ABILITY.COMMANDER_TREE.ALLIES.RECON, ABILITY.COMMANDER_TREE.ALLIES.STRAFE_MG, ABILITY.COMMANDER_TREE.ALLIES.STRAFE_ROCKET, ABILITY.COMMANDER_TREE.ALLIES.RECRUIT_CALLIOPE, ABILITY.COMMANDER_TREE.ALLIES.RECRUIT_PERSHING,
			ABILITY.COMMANDER_TREE.ALLIES.ARMOR_HEAL, ABILITY.COMMANDER_TREE.ALLIES.WAR_MACHINE,
			BP_GetAbilityBlueprint("abilities/ally_paradrop_engineer_reinforcement.lua")
		},
		[World_GetRaceIndex(TRACE_AXIS)] = {
			ABILITY.COMMANDER_TREE.AXIS.FATHERLAND, ABILITY.COMMANDER_TREE.AXIS.DEFENSIVE_ARTILLERY, ABILITY.COMMANDER_TREE.AXIS.ROCKET_BARRAGE, ABILITY.COMMANDER_TREE.AXIS.RECRUIT_STORMTROOPERS, ABILITY.COMMANDER_TREE.AXIS.RECRUIT_STUG,
			ABILITY.COMMANDER_TREE.AXIS.RECRUIT_TIGER, ABILITY.COMMANDER_TREE.AXIS.RESOURCE_BLITZ, ABILITY.COMMANDER_TREE.AXIS.ASSAULT, ABILITY.COMMANDER_TREE.AXIS.BLITZKRIEG, ABILITY.COMMANDER_TREE.AXIS.INSPIRED_ASSAULT,
			ABILITY.COMMANDER_TREE.AXIS.PROPAGANDA_WAR, ABILITY.COMMANDER_TREE.AXIS.FIRESTORM, ABILITY.COMMANDER_TREE.AXIS.RECRUIT_TIGER_ACE,
			BP_GetAbilityBlueprint("abilities/axis_v1_weapon.lua"),
			BP_GetAbilityBlueprint("abilities/axis_pioneer_reinforcements_ability.lua")
		},
		[World_GetRaceIndex(TRACE_AXIS_PANZER_ELITE)] = {
			ABILITY.COMMANDER_TREE.ELITE.AIR_DROPPED_MINES, ABILITY.COMMANDER_TREE.ELITE.RECRUIT_LUFTWAFFE, ABILITY.COMMANDER_TREE.ELITE.RECRUIT_FALLSHIRMAJAGER, ABILITY.COMMANDER_TREE.ELITE.WIRBLE_WIND, ABILITY.COMMANDER_TREE.ELITE.BERGE_TIGER,
			ABILITY.COMMANDER_TREE.ELITE.RECRUIT_JAGDPANTHER, ABILITY.COMMANDER_TREE.ELITE.RECRUIT_HETZER
		}
	}
	
	cmm_table_all_abilities = {
		BP_GetAbilityBlueprint("abilities/allied_armor_self_heal.lua"),
BP_GetAbilityBlueprint("abilities/allied_at_apc_shell.lua"),
BP_GetAbilityBlueprint("abilities/allied_hmg_armor_piercing_round.lua"),
BP_GetAbilityBlueprint("abilities/ally_air_recon_ability.lua"),
BP_GetAbilityBlueprint("abilities/ally_air_strike_ability_rockets.lua"),
BP_GetAbilityBlueprint("abilities/ally_air_strike_ability_strafe.lua"),
BP_GetAbilityBlueprint("abilities/ally_air_strike_ability_strafe2.lua"),
BP_GetAbilityBlueprint("abilities/ally_fireup_ability.lua"),
BP_GetAbilityBlueprint("abilities/ally_fireup_ability_sp_m01.lua"),
BP_GetAbilityBlueprint("abilities/ally_fireup_ability_sp_m07.lua"),
BP_GetAbilityBlueprint("abilities/ally_fire_calliope.lua"),
BP_GetAbilityBlueprint("abilities/ally_heavy_crush_bulldozer_ability.lua"),
BP_GetAbilityBlueprint("abilities/ally_howitzer_barrage_ability.lua"),
BP_GetAbilityBlueprint("abilities/ally_leadership_officer.lua"),
BP_GetAbilityBlueprint("abilities/ally_mortar_smoke_barrage.lua"),
BP_GetAbilityBlueprint("abilities/ally_off_map_artillery_ability_sp_m01.lua"),
BP_GetAbilityBlueprint("abilities/ally_off_map_battalion_shoot.lua"),
BP_GetAbilityBlueprint("abilities/ally_off_map_battalion_shoot_sp.lua"),
BP_GetAbilityBlueprint("abilities/ally_off_map_divisional_shoot.lua"),
BP_GetAbilityBlueprint("abilities/ally_off_map_howitzer_shoot.lua"),
BP_GetAbilityBlueprint("abilities/ally_paradrop_57mm_at.lua"),
BP_GetAbilityBlueprint("abilities/ally_paradrop_ability.lua"),
BP_GetAbilityBlueprint("abilities/ally_paradrop_ability_airborne_infantry.lua"),
BP_GetAbilityBlueprint("abilities/ally_paradrop_ability_airborne_infantry_anywhere.lua"),
BP_GetAbilityBlueprint("abilities/ally_paradrop_ability_airborne_infantry_sp.lua"),
BP_GetAbilityBlueprint("abilities/ally_paradrop_ability_airborne_infantry_sp_anywhere.lua"),
BP_GetAbilityBlueprint("abilities/ally_paradrop_ability_supplies.lua"),
BP_GetAbilityBlueprint("abilities/ally_paradrop_ability_supplies_fuel.lua"),
BP_GetAbilityBlueprint("abilities/ally_paradrop_ability_supplies_munitions_sp.lua"),
BP_GetAbilityBlueprint("abilities/ally_paradrop_engineer_reinforcement.lua"),
BP_GetAbilityBlueprint("abilities/ally_paradrop_scar.lua"),
BP_GetAbilityBlueprint("abilities/ally_reinforcements_ability_rangers.lua"),
BP_GetAbilityBlueprint("abilities/ally_suppression_ability.lua"),
BP_GetAbilityBlueprint("abilities/ally_suppression_ability_rifle_squad_infantry.lua"),
BP_GetAbilityBlueprint("abilities/ally_sync_mortar_barrage.lua"),
BP_GetAbilityBlueprint("abilities/ally_sync_mortar_barrage_improved.lua"),
BP_GetAbilityBlueprint("abilities/ally_throw_grenade.lua"),
BP_GetAbilityBlueprint("abilities/ally_throw_grenade_fast.lua"),
BP_GetAbilityBlueprint("abilities/ally_throw_grenade_no_requirements.lua"),
BP_GetAbilityBlueprint("abilities/ally_throw_satchel_charge.lua"),
BP_GetAbilityBlueprint("abilities/ally_throw_satchel_charge_no_requirements.lua"),
BP_GetAbilityBlueprint("abilities/ally_throw_sticky_bombs.lua"),
BP_GetAbilityBlueprint("abilities/ally_weapon_direct_hit_make_casualty.lua"),
BP_GetAbilityBlueprint("abilities/ally_weapon_direct_hit_make_wreck.lua"),
BP_GetAbilityBlueprint("abilities/ally_weapon_direct_hit_stunned.lua"),
BP_GetAbilityBlueprint("abilities/ambush_camo_timed.lua"),
BP_GetAbilityBlueprint("abilities/ambush_camo_toggled.lua"),
BP_GetAbilityBlueprint("abilities/attrition_ability.lua"),
BP_GetAbilityBlueprint("abilities/axis_150mm_rocket_barrage.lua"),
BP_GetAbilityBlueprint("abilities/axis_280mm_rocket_barrage.lua"),
BP_GetAbilityBlueprint("abilities/axis_assault_ability.lua"),
BP_GetAbilityBlueprint("abilities/axis_at_guns_camouflage_toggled.lua"),
BP_GetAbilityBlueprint("abilities/axis_fire_panzerfaust.lua"),
BP_GetAbilityBlueprint("abilities/axis_for_the_fuhrer.lua"),
BP_GetAbilityBlueprint("abilities/axis_heavy_crush_ability.lua"),
BP_GetAbilityBlueprint("abilities/axis_kch_assault_ability.lua"),
BP_GetAbilityBlueprint("abilities/axis_manpower_resource_push.lua"),
BP_GetAbilityBlueprint("abilities/axis_mortar_smoke_barrage.lua"),
BP_GetAbilityBlueprint("abilities/axis_nebelwerfer_barrage.lua"),
BP_GetAbilityBlueprint("abilities/axis_nebelwerfer_barrage_improved.lua"),
BP_GetAbilityBlueprint("abilities/axis_off_map_defensive_bombardment.lua"),
BP_GetAbilityBlueprint("abilities/axis_off_map_defensive_bombardment_player_level.lua"),
BP_GetAbilityBlueprint("abilities/axis_pe_air_dropped_mines.lua"),
BP_GetAbilityBlueprint("abilities/axis_pioneer_antispam.lua"),
BP_GetAbilityBlueprint("abilities/axis_pioneer_reinforcements_ability.lua"),
BP_GetAbilityBlueprint("abilities/axis_reinforcements_ability_tiger_ace.lua"),
BP_GetAbilityBlueprint("abilities/axis_reinforcements_ability_tiger_ace_sp.lua"),
BP_GetAbilityBlueprint("abilities/axis_stormtrooper_ability.lua"),
BP_GetAbilityBlueprint("abilities/axis_stormtrooper_ability_with_stug.lua"),
BP_GetAbilityBlueprint("abilities/axis_stormtrooper_ability_with_tiger.lua"),
BP_GetAbilityBlueprint("abilities/axis_stuka_zu_fuss_rocket_halftrack.lua"),
BP_GetAbilityBlueprint("abilities/axis_sync_mortar_barrage.lua"),
BP_GetAbilityBlueprint("abilities/axis_sync_mortar_bunker_barrage.lua"),
BP_GetAbilityBlueprint("abilities/axis_territory_los_bonus.lua"),
BP_GetAbilityBlueprint("abilities/axis_territory_los_bonus_hq.lua"),
BP_GetAbilityBlueprint("abilities/axis_terror_bombardment.lua"),
BP_GetAbilityBlueprint("abilities/axis_throw_grenade.lua"),
BP_GetAbilityBlueprint("abilities/axis_throw_grenade_assault.lua"),
BP_GetAbilityBlueprint("abilities/axis_throw_grenade_improved.lua"),
BP_GetAbilityBlueprint("abilities/axis_v1_weapon.lua"),
BP_GetAbilityBlueprint("abilities/blitzkrieg_tactics.lua"),
BP_GetAbilityBlueprint("abilities/booby_trap_ability.lua"),
BP_GetAbilityBlueprint("abilities/bren_carrier_hmg_apr.lua"),
BP_GetAbilityBlueprint("abilities/bren_self_repair.lua"),
BP_GetAbilityBlueprint("abilities/building_healing_aura.lua"),
BP_GetAbilityBlueprint("abilities/building_healing_aura_commonwealth.lua"),
BP_GetAbilityBlueprint("abilities/button_enemy_vehicle.lua"),
BP_GetAbilityBlueprint("abilities/calliope_reinforce.lua"),
BP_GetAbilityBlueprint("abilities/camouflage_commando.lua"),
BP_GetAbilityBlueprint("abilities/camouflage_toggled.lua"),
BP_GetAbilityBlueprint("abilities/camouflage_toggled_hetzer.lua"),
BP_GetAbilityBlueprint("abilities/camouflage_toggled_knights_cross.lua"),
BP_GetAbilityBlueprint("abilities/camouflage_toggled_pe_bike.lua"),
BP_GetAbilityBlueprint("abilities/camouflage_toggled_sniper.lua"),
BP_GetAbilityBlueprint("abilities/camouflage_toggled_sniper_allied.lua"),
BP_GetAbilityBlueprint("abilities/captain_force_multiplier.lua"),
BP_GetAbilityBlueprint("abilities/captain_force_multiplier_vet2.lua"),
BP_GetAbilityBlueprint("abilities/command_tank_force_multiplier.lua"),
BP_GetAbilityBlueprint("abilities/command_tank_force_multiplier_vet2.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_25pounder_barrage_ability.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_25pounder_barrage_ability_sp.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_25pounder_barrage_ability_takeover.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_25pounder_supercharge.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_apds_armour_piercing.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_armour_hq_reinforcements_ability.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_bren_capture_enable.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_building_toggle.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_building_toggle_sp.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_captain_resource_multiplier.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_churchill_avre_reinforcement.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_churchill_crocodile_reinforcement.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_churchill_mine_clearing.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_churchill_tank_reinforcement.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_churchill_tank_shock.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_creeping_barrage_cover_ability.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_decoy_artillery.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_decoy_artillery_real.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_fire_avre_petard.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_fire_canister_ammunition.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_flank_speed_bonus.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_foo_artillery.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_foo_command_tank_smoke_barrage.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_force_multipliers.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_hull_down.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_hull_down_croc.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_hull_down_medium.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_lt_heroic_charge_ability.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_mark_strongpoint_sp.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_medical_kit.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_mobile_hq_reinforcements_ability.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_piat.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_priest_barrage_ability.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_priest_barrage_ability_supercharge.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_priest_reinforcement.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_recon_marksmen_shot.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_recon_squad.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_reinforcements_commandos.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_resource_multiplier.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_resource_multiplier_commander_tree.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_smoke_rifle_grenade_ability.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_soldiers_hq_reinforcements_ability.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_suppression_break.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_sync_mortar_barrage.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_sync_mortar_barrage_takeover.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_sync_mortar_supercharge.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_throw_grenade_commando.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_troop_movement.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_truck_armour_setup.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_truck_hq_setup.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_truck_infantry_setup.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_truck_setup.lua"),
BP_GetAbilityBlueprint("abilities/commonwealth_truck_setup_instant.lua"),
BP_GetAbilityBlueprint("abilities/counterbattery_barrage_25_pounder.lua"),
BP_GetAbilityBlueprint("abilities/counterbattery_barrage_3inch_mortar.lua"),
BP_GetAbilityBlueprint("abilities/counterbattery_barrage_priest_105mm.lua"),
BP_GetAbilityBlueprint("abilities/counterbattery_barrage_remove.lua"),
BP_GetAbilityBlueprint("abilities/counterbattery_barrage_remove_mortar.lua"),
BP_GetAbilityBlueprint("abilities/counter_battery.lua"),
BP_GetAbilityBlueprint("abilities/counter_battery_mortar.lua"),
BP_GetAbilityBlueprint("abilities/counter_battery_priest.lua"),
BP_GetAbilityBlueprint("abilities/counter_battery_sp.lua"),
BP_GetAbilityBlueprint("abilities/creeping_barrage.lua"),
BP_GetAbilityBlueprint("abilities/creeping_barrage_25_pounder.lua"),
BP_GetAbilityBlueprint("abilities/creeping_barrage_command_tank_smoke.lua"),
BP_GetAbilityBlueprint("abilities/creeping_barrage_king_tiger_smoke.lua"),
BP_GetAbilityBlueprint("abilities/cut_wires.lua"),
BP_GetAbilityBlueprint("abilities/cut_wires_axis.lua"),
BP_GetAbilityBlueprint("abilities/defensive_smokecloud.lua"),
BP_GetAbilityBlueprint("abilities/disable_capture_ability.lua"),
BP_GetAbilityBlueprint("abilities/donkey_mines.lua"),
BP_GetAbilityBlueprint("abilities/donkey_sprint_ability.lua"),
BP_GetAbilityBlueprint("abilities/donkey_stuka_zu_fuss_rocket.lua"),
BP_GetAbilityBlueprint("abilities/facing_ability.lua"),
BP_GetAbilityBlueprint("abilities/facing_lock_down_ability.lua"),
BP_GetAbilityBlueprint("abilities/fire_smoke_canister.lua"),
BP_GetAbilityBlueprint("abilities/first_aid_heal_ability.lua"),
BP_GetAbilityBlueprint("abilities/follow_ability.lua"),
BP_GetAbilityBlueprint("abilities/follow_ability_captain.lua"),
BP_GetAbilityBlueprint("abilities/follow_ability_command_tank.lua"),
BP_GetAbilityBlueprint("abilities/follow_ability_munitions_halftrack.lua"),
BP_GetAbilityBlueprint("abilities/for_the_fatherland.lua"),
BP_GetAbilityBlueprint("abilities/glider_hq_ability.lua"),
BP_GetAbilityBlueprint("abilities/glider_tetrarch.lua"),
BP_GetAbilityBlueprint("abilities/glider_troops.lua"),
BP_GetAbilityBlueprint("abilities/goliath_detonate.lua"),
BP_GetAbilityBlueprint("abilities/greyhound_mines.lua"),
BP_GetAbilityBlueprint("abilities/hmg_armor_piercing_round.lua"),
BP_GetAbilityBlueprint("abilities/kch_zeal.lua"),
BP_GetAbilityBlueprint("abilities/king_tiger_tank_shock.lua"),
BP_GetAbilityBlueprint("abilities/king_tiger_tank_smoke_barrage.lua"),
BP_GetAbilityBlueprint("abilities/lieutenant_force_multiplier.lua"),
BP_GetAbilityBlueprint("abilities/lieutenant_force_multiplier_vet2.lua"),
BP_GetAbilityBlueprint("abilities/lieutenant_force_multiplier_vet3.lua"),
BP_GetAbilityBlueprint("abilities/medical_kit.lua"),
BP_GetAbilityBlueprint("abilities/medical_kit_field.lua"),
BP_GetAbilityBlueprint("abilities/medical_kit_field_weapon_capture_squad.lua"),
BP_GetAbilityBlueprint("abilities/medical_kit_weapon_capture_squad.lua"),
BP_GetAbilityBlueprint("abilities/mortar_hold_fire.lua"),
BP_GetAbilityBlueprint("abilities/necessary_player_ability.lua"),
BP_GetAbilityBlueprint("abilities/non_commonwealth_slit_trench_modifiers.lua"),
BP_GetAbilityBlueprint("abilities/off_map_artillery_ability.lua"),
BP_GetAbilityBlueprint("abilities/off_map_artillery_ability_sp_m04.lua"),
BP_GetAbilityBlueprint("abilities/overwatch_barrage.lua"),
BP_GetAbilityBlueprint("abilities/overwatch_barrage_25_pounder.lua"),
BP_GetAbilityBlueprint("abilities/overwatch_barrage_25_pounder_remove.lua"),
BP_GetAbilityBlueprint("abilities/overwatch_barrage_3inch_mortar.lua"),
BP_GetAbilityBlueprint("abilities/overwatch_barrage_3inch_mortar_remove.lua"),
BP_GetAbilityBlueprint("abilities/overwatch_barrage_priest_105mm.lua"),
BP_GetAbilityBlueprint("abilities/overwatch_barrage_priest_105mm_remove.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_area_effects.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_bergetiger_ability.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_building_booby_trap.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_car_setup.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_car_unsetup.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_fallschirmjager_camo.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_fallschirmjager_throw_incendiary_grenade.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_fire_panzerfaust.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_fire_panzerfaust_fallschirmjager.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_fire_panzerfaust_improved.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_focused_firing.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_henschel_all_targets.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_henschel_at_strike.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_howitzer_barrage_ability.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_howitzer_barrage_ability_improved.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_hq_munitions_resupply.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_hummel_artillery.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_incendiary_mortar_barrage.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_infiltration_fallshirmjager_ability.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_luftwaffe_ability.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_medical_aura.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_munitions_resupply.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_point_booby_trap.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_point_booby_trap_improved.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_reinforcements_hetzer.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_reinforcements_jagdpanther.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_reinforcements_panther_battlegroup.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_sprint_ability.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_sync_mortar_barrage.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_throw_incendiary_grenade.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_warning_shot.lua"),
BP_GetAbilityBlueprint("abilities/panzer_elite_wirblewind_ability.lua"),
BP_GetAbilityBlueprint("abilities/panzer_grenadier_mob_bonuses.lua"),
BP_GetAbilityBlueprint("abilities/panzer_grenadier_reinforcements_ability_large_squads.lua"),
BP_GetAbilityBlueprint("abilities/panzer_grenadier_reinforcements_ability_small_squads.lua"),
BP_GetAbilityBlueprint("abilities/pershing_reinforce.lua"),
BP_GetAbilityBlueprint("abilities/pe_lockdown_hummel_rapidfire.lua"),
BP_GetAbilityBlueprint("abilities/pe_lockdown_marder_iii_at.lua"),
BP_GetAbilityBlueprint("abilities/pe_lockdown_panzeriv_rapid_fire.lua"),
BP_GetAbilityBlueprint("abilities/pe_munitionspanzer_goliath.lua"),
BP_GetAbilityBlueprint("abilities/pe_overdrive.lua"),
BP_GetAbilityBlueprint("abilities/pe_test_halftrack_sniper.lua"),
BP_GetAbilityBlueprint("abilities/recover_ability_bergtiger.lua"),
BP_GetAbilityBlueprint("abilities/reenable_capture_ability.lua"),
BP_GetAbilityBlueprint("abilities/reinforcements_ability.lua"),
BP_GetAbilityBlueprint("abilities/reinforcements_ability_new.lua"),
BP_GetAbilityBlueprint("abilities/reinforcements_ability_sp_m03.lua"),
BP_GetAbilityBlueprint("abilities/repair_ability.lua"),
BP_GetAbilityBlueprint("abilities/repair_ability_bergtiger.lua"),
BP_GetAbilityBlueprint("abilities/repair_ability_over_repair.lua"),
BP_GetAbilityBlueprint("abilities/repair_ability_pe.lua"),
BP_GetAbilityBlueprint("abilities/repair_ability_pe_bike.lua"),
BP_GetAbilityBlueprint("abilities/repair_ability_pe_improved.lua"),
BP_GetAbilityBlueprint("abilities/repair_ability_pe_improved_bike.lua"),
BP_GetAbilityBlueprint("abilities/repair_ability_pioneer_vet_3.lua"),
BP_GetAbilityBlueprint("abilities/resource_commonwealth_set_up_hq.lua"),
BP_GetAbilityBlueprint("abilities/resource_manpower_commonwealth_default.lua"),
BP_GetAbilityBlueprint("abilities/resource_manpower_player_default.lua"),
BP_GetAbilityBlueprint("abilities/resource_manpower_upgrade.lua"),
BP_GetAbilityBlueprint("abilities/resource_manpower_upgrade_advanced.lua"),
BP_GetAbilityBlueprint("abilities/resource_manpower_upgrade_more_advanced.lua"),
BP_GetAbilityBlueprint("abilities/retreat_to_captain_ability.lua"),
BP_GetAbilityBlueprint("abilities/rout_ability.lua"),
BP_GetAbilityBlueprint("abilities/rout_officer_ability.lua"),
BP_GetAbilityBlueprint("abilities/salvage_wreck_ability.lua"),
BP_GetAbilityBlueprint("abilities/sector_artillery.lua"),
BP_GetAbilityBlueprint("abilities/secure_territory_on_and_off.lua"),
BP_GetAbilityBlueprint("abilities/sherman_crab_mine_clearing.lua"),
BP_GetAbilityBlueprint("abilities/sp_ally_air_recon_ability.lua"),
BP_GetAbilityBlueprint("abilities/sp_ally_air_strike_ability_rockets.lua"),
BP_GetAbilityBlueprint("abilities/sp_axis_mortar_smoke_barrage.lua"),
BP_GetAbilityBlueprint("abilities/sp_axis_sync_mortar_barrage.lua"),
BP_GetAbilityBlueprint("abilities/sp_caen_air_recon_ability.lua"),
BP_GetAbilityBlueprint("abilities/sp_caen_air_strike_ability_rockets.lua"),
BP_GetAbilityBlueprint("abilities/sp_caen_air_strike_ability_strafe.lua"),
BP_GetAbilityBlueprint("abilities/sp_caen_commonwealth_air_strike_ability_strafe.lua"),
BP_GetAbilityBlueprint("abilities/sp_camouflage_toggled.lua"),
BP_GetAbilityBlueprint("abilities/sp_commonwealth_air_recon_ability.lua"),
BP_GetAbilityBlueprint("abilities/sp_commonwealth_air_strike_ability_rockets.lua"),
BP_GetAbilityBlueprint("abilities/sp_commonwealth_air_strike_ability_strafe.lua"),
BP_GetAbilityBlueprint("abilities/sp_defensive_smokecloud.lua"),
BP_GetAbilityBlueprint("abilities/sp_engineers_ability.lua"),
BP_GetAbilityBlueprint("abilities/sp_goodwood_scar_func.lua"),
BP_GetAbilityBlueprint("abilities/sp_hells_highway_reinforcements_ability.lua"),
BP_GetAbilityBlueprint("abilities/sp_hmg_ability.lua"),
BP_GetAbilityBlueprint("abilities/sp_mortar_ability.lua"),
BP_GetAbilityBlueprint("abilities/sp_panzer_elite_infiltration_fallshirmjager_ability_building_only.lua"),
BP_GetAbilityBlueprint("abilities/sp_panzer_elite_infiltration_fallshirmjager_ability_no_fow.lua"),
BP_GetAbilityBlueprint("abilities/sp_paratroopers_ability.lua"),
BP_GetAbilityBlueprint("abilities/sp_riflemen_ability.lua"),
BP_GetAbilityBlueprint("abilities/sp_single_creepingbarrage_mortar.lua"),
BP_GetAbilityBlueprint("abilities/sp_single_creepingbarrage_smoke.lua"),
BP_GetAbilityBlueprint("abilities/sp_single_firestorm.lua"),
BP_GetAbilityBlueprint("abilities/sp_single_howitzer.lua"),
BP_GetAbilityBlueprint("abilities/sp_single_howitzer_altsound.lua"),
BP_GetAbilityBlueprint("abilities/sp_single_mortar.lua"),
BP_GetAbilityBlueprint("abilities/sp_single_mortar_smoke.lua"),
BP_GetAbilityBlueprint("abilities/sp_single_mortar_smokeentrance.lua"),
BP_GetAbilityBlueprint("abilities/sp_single_nebel_rocket.lua"),
BP_GetAbilityBlueprint("abilities/sp_single_stuka_rocket.lua"),
BP_GetAbilityBlueprint("abilities/sp_sniper_ability.lua"),
BP_GetAbilityBlueprint("abilities/stormtrooper_zeal.lua"),
BP_GetAbilityBlueprint("abilities/supervise_ability.lua"),
BP_GetAbilityBlueprint("abilities/suppression_ability.lua"),
BP_GetAbilityBlueprint("abilities/test_pe_plan_file.lua"),
BP_GetAbilityBlueprint("abilities/toggle_minesweeper_flamethrower.lua"),
BP_GetAbilityBlueprint("abilities/toggle_resource_stealing.lua"),
BP_GetAbilityBlueprint("abilities/v1_targeter.lua"),
BP_GetAbilityBlueprint("abilities/v1_target_ability.lua"),
BP_GetAbilityBlueprint("abilities/vehicle_cover_ability.lua"),
BP_GetAbilityBlueprint("abilities/victor_targeter.lua"),
BP_GetAbilityBlueprint("abilities/victor_target_ability.lua")
	}
	
	cmm_table_atmosphere = {
		"best_local.aps",
"caen_new_teal.aps",
"cxp1_authie_lighting.aps",
"cxp1_authie_midday_00.aps",
"cxp1_authie_midday_00_end.aps",
"cxp1_caen_dawn_00.aps",
"cxp1_caen_dawn_01.aps",
"cxp1_caen_dawn_02.aps",
"cxp1_caen_dawn_03.aps",
"cxp1_caen_midday_00.aps",
"cxp1_caen_midday_00_nis.aps",
"cxp1_caen_midday_01.aps",
"cxp1_caen_night_00.aps",
"cxp1_carentan_gfw_00.aps",
"cxp1_carentan_gfw_01.aps",
"cxp1_carpiquet_dawn_00.aps",
"cxp1_carpiquet_dawn_01.aps",
"cxp1_carpiquet_night_00.aps",
"cxp1_carpiquet_night_01.aps",
"cxp1_goodwood_midday_00.aps",
"cxp1_goodwood_midday_01.aps",
"cxp1_hill112_a_00.aps",
"cxp1_hill112_midday_00.aps",
"cxp1_hill112_midday_01.aps",
"cxp1_hill112_night_00.aps",
"cxp1_hill112_night_01.aps",
"cxp2_arnhem.aps",
"cxp2_arnhem_midday_00.aps",
"cxp2_arnhem_midday_01.aps",
"cxp2_best_night_00.aps",
"cxp2_best_night_00_nis.aps",
"cxp2_best_night_01.aps",
"cxp2_best_night_01_wetmap.aps",
"cxp2_best_night_norain_00.aps",
"cxp2_best_night_rain_00.aps",
"cxp2_hells_highway_dusk_00.aps",
"cxp2_hells_highway_night_00.aps",
"cxp2_hells_highway_stormy_00.aps",
"cxp2_hells_highway_stormy_00_nis.aps",
"cxp2_hells_highway_stormy_01.aps",
"cxp2_hells_highway_stormy_nolightening_00.aps",
"cxp2_oosterbeek_daybreak_00.aps",
"cxp2_oosterbeek_daybreak_01.aps",
"cxp2_oosterbeek_daybreak_rain_00.aps",
"cxp2_oosterbeek_daybreak_stormyrain_00.aps",
"cxp2_oosterbeek_night_00.aps",
"cxp2_oosterbeek_night_01.aps",
"cxp2_oosterbeek_night_nis_00.aps",
"cxp2_oosterbeek_predawn_00.aps",
"cxp2_wolfheze_afternoon_00.aps",
"cxp2_wolfheze_afternoon_00_nis.aps",
"cxp2_wolfheze_afternoon_01.aps",
"cxp2_wolfheze_afternoon_bw_00.aps",
"cxp2_wolfheze_midday_00.aps",
"cxp2_wolfheze_midday_00_bw.aps",
"cxp2_wolfheze_midday_00_colour.aps",
"c_w.aps",
"default.aps",
"goodwood.aps",
"m00_lighting.aps",
"m01_lighting.aps",
"m02_hill112_lighting.aps",
"m02_lighting.aps",
"m02_lighting_old.aps",
"m03_lighting.aps",
"m04_lighting.aps",
"m05_lighting.aps",
"m06_lighting.aps",
"m07_lighting.aps",
"m08_lighting.aps",
"m08_lighting_tamas.aps",
"m09_lighting.aps",
"m10_lighting.aps",
--"m10_lighting_night.aps", --> crashes game!
"m10_lighting_old.aps",
"m12_lighting.aps",
"m12_lighting_new.aps",
"m13_lighting.aps",
"m13_nis13_01.aps",
"m14_lighting.aps",
"m15_lighting.aps",
"m16_lighting.aps",
"minimap.aps",
"mp_2p_best_rain_00.aps",
"mp_2p_hells_highway_dusk_00.aps",
"mp_4p_bedum_night_00.aps",
"mp_4p_etavaux_overcast_00.aps",
"mp_4p_etavaux_sunny_00.aps",
"mp_4p_linden_dawn_00.aps",
"mp_4p_linden_midday_00.aps",
"mp_4p_wolfheze_afternoon_00.aps",
"mp_4p_wolfheze_dusknight_00.aps",
"mp_6p_close_river_combat_hazy_00.aps",
"mp_6p_close_river_combat_stormy_00.aps",
"mp_8p_best_hazy_00.aps",
"mp_angoville_farms.aps",
"mp_angoville_farms_dusk_00.aps",
"mp_bernieres-sure-mer.aps",
"mp_bernieres-sure-mer_dawn_00.aps",
"mp_bernieres-sure-mer_dawn_00_nowetmap.aps",
"mp_bernieres-sure-mer_midday_00.aps",
"mp_bernieres-sure-mer_stormy.aps",
"mp_bernieres-sure-mer_stormy_00.aps",
"mp_bernieres-sure-mer_stormy_00_demo.aps",
"mp_bernieres-sure-mer_stormy_00_wetmap.aps",
"mp_bernieres-sure-mer_stormy_02.aps",
"mp_bernieres-sure-mer_stormy_03.aps",
"mp_bernieres-sure-mer_stormy_new_rain_00.aps",
"mp_coastal_harbour_dawn_00.aps",
"mp_coastal_harbour_rainy_00.aps",
"mp_docks01.aps",
"mp_drekplaats_dusk_00.aps",
"mp_drekplaats_rainy_00.aps",
"mp_firefight.aps",
"mp_hedgerow_siege_dawn_00.aps",
"mp_hedgerow_siege_overcast_00.aps",
"mp_hill331.aps",
"mp_hill331_midday_00.aps",
"mp_hinderdam_night_00.aps",
"mp_hinderdam_rainy_00.aps",
"mp_langres_midday_00.aps",
"mp_loraineredux.aps",
"mp_loraineredux_rainy_00.aps",
"mp_lowlands.aps",
"mp_lowlands_stormy_00.aps",
"mp_lyon_dawn_00.aps",
"mp_lyon_midday_00.aps",
"mp_mcgechaens.aps",
"mp_mcgechaens_sunny_00.aps",
"mp_montargis_region_night_00.aps",
"mp_montargis_region_stormy_00.aps",
"mp_montherme.aps",
"mp_montherme_afternoon_00.aps",
"mp_pointe_du_hoc.aps",
"mp_pointe_du_hoc_stormy_00.aps",
"mp_railsnmetal.aps",
"mp_railsnmetal_stormy_00.aps",
"mp_routen13.aps",
"mp_routen13_dawn_00.aps",
"mp_seine_river_docks_00.aps",
"mp_seine_river_docks_night_00.aps",
"mp_semois.aps",
"mp_semois_stormy_00.aps",
"mp_streams_restamp.aps",
"mp_stream_crossing.aps",
"mp_sturzdorf.aps",
"mp_sturzdorf_midday_00.aps",
"mp_st_hilaire.aps",
"mp_st_hilaire_raining_00.aps",
"mp_vire.aps",
"mp_vire_sunny_00.aps",
"n13_01_m13_lighting.aps",
"sample_cold_dawn.aps",
"sample_dawn.aps",
"sample_frosty_night.aps",
"sample_moonlight.aps",
"sample_overcast.aps",
"sample_pre_dawn.aps",
"sample_pre_dawn2.aps",
"sample_rainy_day.aps",
"sample_sunny.aps",
"sample_sunny_morning.aps",
"sample_sunset_01.aps",
"sample_sunset_02.aps",
"test_caen_m5.aps",
"test_fullbright.aps",
"test_halfsunlight_halfambient.aps",
"test_lighting_00.aps",
"test_lighting_01.aps",
"test_nosunlight.aps",
"test_structure_portrait_bofro.aps",
"test_structure_portrait_lighting.aps",
"test_sunlightonly.aps",
"test_trees.aps",
"tst5.aps",
"tutorial.aps"
	}
end


function CheatMod_MP_Init()
	Init_Globals()
	Init_Players()
	Rule_AddInterval(CMM_Update_Player_Squads_and_Entities, 0.125)
	
	if (Scar_DebugConsoleExecute ~= nil) then
		Scar_DebugConsoleExecute("bind([[SHIFT+Control+F10]], [[Scar_DoString('CMM_Test()')]])")
		--Scar_DebugConsoleExecute("bind([[SHIFT+Control+F9]], [[Scar_DoString('CMM_Test2()')]])")
	end
end

Scar_AddInit(CheatMod_MP_Init)

function CMM_Test()
	Util_ReloadScript()
	DisplayText("SCAR scripts reloaded (check console (CTRL-SHIFT-~) for errors)")
end
